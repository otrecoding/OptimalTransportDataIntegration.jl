var documenterSearchIndex = {"docs":
[{"location":"#OptimalTransportDataIntegration.jl","page":"Documentation","title":"OptimalTransportDataIntegration.jl","text":"","category":"section"},{"location":"","page":"Documentation","title":"Documentation","text":"CurrentModule = OptimalTransportDataIntegration","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"","category":"page"},{"location":"","page":"Documentation","title":"Documentation","text":"Modules = [OptimalTransportDataIntegration]","category":"page"},{"location":"#OptimalTransportDataIntegration.Instance","page":"Documentation","title":"OptimalTransportDataIntegration.Instance","text":"struct Instance\n\nDefinition and initialization of an Instance structure\n\ndatafile : file name\ndistance : âˆˆ ( Cityblock, Euclidean, Hamming )\nindXA    : indexes of subjects of A with given X value\nindXB    : indexes of subjects of B with given X value\n\n\n\n\n\n","category":"type"},{"location":"#OptimalTransportDataIntegration.Solution","page":"Documentation","title":"OptimalTransportDataIntegration.Solution","text":"mutable struct Solution\n\ntsolve       : solution time\njointYZA     : joint distribution of Y and Z in A\njointYZB     : joint distribution of Y and Z in B\nestimatorZA  : estimator of probability of Z for individuals in base A\nestimatorYB  : estimator of probability of Y for individuals in base B\n\n\n\n\n\n","category":"type"},{"location":"#OptimalTransportDataIntegration.average_distance_to_closest-Tuple{Instance, Float64}","page":"Documentation","title":"OptimalTransportDataIntegration.average_distance_to_closest","text":"average_distance_to_closest(inst, percent_closest)\n\n\nCompute the cost between pairs of outcomes as the average distance between covariations of individuals with these outcomes, but considering only the percent closest neighbors\n\n\n\n\n\n","category":"method"},{"location":"#OptimalTransportDataIntegration.compute_pred_error!","page":"Documentation","title":"OptimalTransportDataIntegration.compute_pred_error!","text":"compute_pred_error!(sol, inst)\ncompute_pred_error!(sol, inst, proba_disp)\ncompute_pred_error!(sol, inst, proba_disp, mis_disp)\ncompute_pred_error!(\n    sol,\n    inst,\n    proba_disp,\n    mis_disp,\n    full_disp\n)\n\n\nCompute prediction errors in a solution\n\n\n\n\n\n","category":"function"},{"location":"#OptimalTransportDataIntegration.generate_xcat_ycat-Tuple{DataParameters}","page":"Documentation","title":"OptimalTransportDataIntegration.generate_xcat_ycat","text":"generate_xcat_ycat(params)\n\n\nFunction to generate data where X and (Y,Z) are categoricals\n\nthe function return a Dataframe with X1, X2, X3, Y, Z and the database id.\n\n\n\n\n\n","category":"method"},{"location":"#OptimalTransportDataIntegration.optimal_modality-Tuple{Any, Any, Any}","page":"Documentation","title":"OptimalTransportDataIntegration.optimal_modality","text":"optimal_modality(values, loss, weight)\n\nvalues: vector of possible values\nweight: vector of weights \nloss: matrix of size len(Weight) * len(Values)\nReturns an argmin over value in values of the scalar product <loss[value,],weight> \n\n\n\n\n\n","category":"method"},{"location":"#OptimalTransportDataIntegration.ot_joint","page":"Documentation","title":"OptimalTransportDataIntegration.ot_joint","text":"ot_joint(inst)\not_joint(inst, maxrelax)\not_joint(inst, maxrelax, lambda_reg)\not_joint(inst, maxrelax, lambda_reg, percent_closest)\not_joint(inst, maxrelax, lambda_reg, percent_closest, norme)\not_joint(\n    inst,\n    maxrelax,\n    lambda_reg,\n    percent_closest,\n    norme,\n    aggregate_tol\n)\not_joint(\n    inst,\n    maxrelax,\n    lambda_reg,\n    percent_closest,\n    norme,\n    aggregate_tol,\n    full_disp\n)\not_joint(\n    inst,\n    maxrelax,\n    lambda_reg,\n    percent_closest,\n    norme,\n    aggregate_tol,\n    full_disp,\n    solver_disp\n)\n\n\nModel where we directly compute the distribution of the outcomes for each individual or for sets of indviduals that similar values of covariates\n\naggregate_tol: quantify how much individuals' covariates must be close for aggregation\nreg_norm: norm1, norm2 or entropy depending on the type of regularization\npercent_closest: percent of closest neighbors taken into consideration in regularization\nlambda_reg: coefficient measuring the importance of the regularization term\nfull_disp: if true, write the transported value of each individual; otherwise, juste write the number of missed transports\nsolver_disp: if false, do not display the outputs of the solver\n\n\n\n\n\n","category":"function"}]
}
